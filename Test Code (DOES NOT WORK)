; TMS9918A
.org $C000

VDP_VRAM    =       $B000 
VDP_REG     =       $B001 

VDP_WRITE_VRAM_BIT = $40
VDP_REGISTER_BITS = $80

VDP_NAME_TABLE_BASE = $0000
VDP_PATTERN_TABLE_BASE = $0800

; zero page addresses
VDP_PATTERN_INIT = $30
VDP_PATTERN_INIT_HI = $31

start:
ldy #$00
jsr vdp_reg_reset
jsr Init_Pattern
jsr Print
jmp end

end:
jmp end

Init_Pattern:
Init_H:
lda #$08
sty VDP_REG
ora VDP_WRITE_VRAM_BIT
sta VDP_REG
lda ByteH,Y
sta VDP_VRAM
iny
cpy $#08
bne Init_H

Init_E:
lda #$08
sty VDP_REG
ora VDP_WRITE_VRAM_BIT
sta VDP_REG
lda ByteE,Y
sta VDP_VRAM
iny
cpy $#10
bne Init_E

Init_L:
lda #$08
sty VDP_REG
ora VDP_WRITE_VRAM_BIT
sta VDP_REG
lda ByteL,Y
sta VDP_VRAM
iny
cpy $#18
bne Init_L


Init_O:
lda #$08
sty VDP_REG
ora VDP_WRITE_VRAM_BIT
sta VDP_REG
lda ByteO,Y
sta VDP_VRAM
iny
cpy $#20
bne Init_O


Init__:
lda #$08
sty VDP_REG
ora VDP_WRITE_VRAM_BIT
sta VDP_REG
lda Byte_,Y
sta VDP_VRAM
iny
cpy $#28
bne Init__


Init_W:
lda #$08
sty VDP_REG
ora VDP_WRITE_VRAM_BIT
sta VDP_REG
lda ByteW,Y
sta VDP_VRAM
iny
cpy $#30
bne Init_W


Init_R:
lda #$08
sty VDP_REG
ora VDP_WRITE_VRAM_BIT
sta VDP_REG
lda ByteR,Y
sta VDP_VRAM
iny
cpy $#38
bne Init_R


Init_D:
lda #$08
sty VDP_REG
ora VDP_WRITE_VRAM_BIT
sta VDP_REG
lda ByteD,Y
sta VDP_VRAM
iny
cpy $#40
bne Init_D


Init_1:
lda #$08
sty VDP_REG
ora VDP_WRITE_VRAM_BIT
sta VDP_REG
lda Byte1,Y
sta VDP_VRAM
iny
cpy $#48
bne Init_1


rts

Print:
ldx #$00
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
stx VDP_REG
lda #$40
sta VDP_REG
lda Order,x
sta VDP_VRAM
inx
rts










vdp_reg_reset:
  pha
  phx

  ldx #0
vdp_reg_reset_loop:
  ; write value
  lda vdp_register_inits,x
  sta VDP_REG
  ; write reg #
  txa
  ora #VDP_REGISTER_BITS
  sta VDP_REG
  inx
  cpx #(vdp_end_register_inits - vdp_register_inits)
  bne vdp_reg_reset_loop
  plx 
  pla
  rts
  
  vdp_register_inits:
vdp_register_0: .byte %00000000 ; 0  0  0  0  0  0  M3 EXTVDP
vdp_register_1: .byte %10010000 ;16k Bl IE M1 M2 0 Siz MAG
vdp_register_2: .byte $00       ; Name table base / $400. $00 = $0000
vdp_register_3: .byte $00       ; Color table base (currently unused)
vdp_register_4: .byte $01       ; Pattern table base / $800. $01 = $0800
vdp_register_5: .byte $00       ; Sprite attribute table base (currently unused)
vdp_register_6: .byte $00       ; Sprite pattern generator (currently unused)
vdp_register_7: .byte $F5       ; FG/BG. F=>White Text, 5=>Light Blue Background
vdp_end_register_inits:


; Hello World! = 1,2,3,3,4,5,6,4,7,3,8,9

VDP_Pattern_Table:
byteH: .byte $88,$88,$88,$F8,$88,$88,$88,$00 ; H
ByteE: .byte $F8,$80,$80,$F0,$80,$80,$F8,$00 ; E
ByteL: .byte $80,$80,$80,$80,$80,$80,$F8,$00 ; L
ByteO: .byte $70,$88,$88,$88,$88,$88,$70,$00 ; O
Byte_: .byte $00,$00,$00,$00,$00,$00,$00,$00 ; ' '
ByteW: .byte $88,$88,$88,$A8,$A8,$D8,$88,$00 ; W
ByteR: .byte $F0,$88,$88,$F0,$A0,$90,$88,$00 ; R
ByteD: .byte $F0,$88,$88,$88,$88,$88,$F0,$00 ; D
Byte1: .byte $20,$20,$20,$00,$20,$20,$00,$00 ; !
VDP_Pattern_Table_End:


Order: .byte $01,$02,$03,$03,$04,$05,$06,$04,$07,$03,$08,$09



